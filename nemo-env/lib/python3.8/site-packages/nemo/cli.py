import argparse
import sys
import subprocess
from termcolor import colored
import pyfiglet
from nemo.scanners.port_scan import port_scan
from nemo.scanners.ping_sweep import ping_sweep
from nemo.monitors.bandwidth_analysis import bandwidth_analysis
from nemo.monitors.latency_measure import measure_latency
from nemo.utils.report_generator import generate_report
from nemo.alerts.alerting_system import send_alert

def print_banner():
    banner = pyfiglet.figlet_format("Ne - Mo")
    print(colored(banner, 'cyan'))

def main():
    print_banner()

    parser = argparse.ArgumentParser(
        description="Network Monitoring CLI Tool",
        usage="""nemo <command> [<args>]

Available commands:
   p       Perform a ping sweep
   ps      Perform a port scan
   a       Perform an advanced scan
   b       Monitor bandwidth usage
   l       Measure latency to a host
   al      Send an alert
   r       Generate a report
"""
    )
    subparsers = parser.add_subparsers(dest='command')

    # Ping sweep command
    ping_parser = subparsers.add_parser('p', help='Perform a ping sweep')
    ping_parser.add_argument('-i', required=True, help='IP range to ping')

    # Port scan command
    port_parser = subparsers.add_parser('ps', help='Perform a port scan')
    port_parser.add_argument('-i', required=True, help='IP address to scan')
    port_parser.add_argument('-r', required=True, help='Port range to scan (e.g. 20-80)')

    # Advanced scan command
    advanced_parser = subparsers.add_parser('a', help='Perform an advanced scan')

    # Bandwidth monitor command
    bandwidth_parser = subparsers.add_parser('b', help='Monitor bandwidth usage')
    bandwidth_parser.add_argument('-i', required=True, help='Network interface to monitor (e.g., eth0)')

    # Latency measurement command
    latency_parser = subparsers.add_parser('l', help='Measure latency to a host')
    latency_parser.add_argument('-H', required=True, help='Host to measure latency to')

    # Alert command
    alert_parser = subparsers.add_parser('al', help='Send an alert')
    alert_parser.add_argument('-e', required=True, help='Email address to send alert to')
    alert_parser.add_argument('-s', required=True, help='Subject of the alert')
    alert_parser.add_argument('-m', required=True, help='Message body of the alert')

    # Report generation command
    report_parser = subparsers.add_parser('r', help='Generate a report')
    report_parser.add_argument('-o', required=True, help='Output file for the report')

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        sys.exit(1)

    if args.command == 'p':
        handle_ping(args)
    elif args.command == 'ps':
        handle_port(args)
    elif args.command == 'a':
        handle_advanced(args)
    elif args.command == 'b':
        handle_bandwidth(args)
    elif args.command == 'l':
        handle_latency(args)
    elif args.command == 'al':
        handle_alert(args)
    elif args.command == 'r':
        handle_report(args)

def handle_ping(args):
    try:
        res = ping_sweep(args.i)
        for item in res:
            print(colored(f"{item['ip']} is {item['status']}", 'green'))
    except PermissionError:
        print(colored("Permission denied: Try running the command with 'sudo'.", 'red'))

def handle_port(args):
    try:
        port_range = list(map(int, args.r.split('-')))
        open_ports = port_scan(args.i, port_range)
        if open_ports:
            print(colored(f"Open ports on {args.i}:", 'green'))
            for port in open_ports:
                port_str = f"Port {port.get('port', 'N/A')}: {port.get('state', 'N/A')} ({port.get('service', 'N/A')} - {port.get('version', 'N/A')})"
                print(colored(port_str, 'green'))
        else:
            print(colored("No open ports found or scan failed.", 'red'))
    except subprocess.CalledProcessError as e:
        print(colored(f"Failed to run nmap: {e.output.decode()}", 'red'))
        print(colored("Please make sure nmap is installed and you have sufficient permissions.", 'red'))
    except PermissionError:
        print(colored("Permission denied: Try running the command with 'sudo'.", 'red'))

def handle_advanced(args):
    print(colored("Advanced scan not implemented yet", 'yellow'))

def handle_bandwidth(args):
    bandwidth_analysis(args.i)

def handle_latency(args):
    measure_latency(args.H)

def handle_alert(args):
    success = send_alert(args.e, args.s, args.m)
    if success:
        print(colored("Alert sent successfully", 'green'))
    else:
        print(colored("Failed to send alert", 'red'))

def handle_report(args):
    generate_report(args.o)
    print(colored("Report generation completed", 'green'))

if __name__ == "__main__":
    main()

